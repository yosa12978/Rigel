// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rigel.EFCore.Data;

#nullable disable

namespace Rigel.Migrations.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230501104943_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Rigel.Core.Models.Category", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Rigel.Core.Models.Message", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("TEXT");

                    b.Property<string>("authorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("deleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("edited")
                        .HasColumnType("INTEGER");

                    b.Property<string>("parentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("postId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("pubDate")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("authorId");

                    b.HasIndex("parentId");

                    b.HasIndex("postId");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("Rigel.Core.Models.Post", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("TEXT");

                    b.Property<string>("authorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("categoryId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("changeDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("deleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("edited")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("pubDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("authorId");

                    b.HasIndex("categoryId");

                    b.ToTable("posts");
                });

            modelBuilder.Entity("Rigel.Core.Models.User", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("TEXT");

                    b.Property<string>("avatar")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("isActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("nickname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("regDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("salt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Rigel.Core.Models.Message", b =>
                {
                    b.HasOne("Rigel.Core.Models.User", "author")
                        .WithMany("messages")
                        .HasForeignKey("authorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rigel.Core.Models.Message", "parent")
                        .WithMany("replies")
                        .HasForeignKey("parentId");

                    b.HasOne("Rigel.Core.Models.Post", "post")
                        .WithMany("messages")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");

                    b.Navigation("parent");

                    b.Navigation("post");
                });

            modelBuilder.Entity("Rigel.Core.Models.Post", b =>
                {
                    b.HasOne("Rigel.Core.Models.User", "author")
                        .WithMany("posts")
                        .HasForeignKey("authorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rigel.Core.Models.Category", "category")
                        .WithMany("posts")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");

                    b.Navigation("category");
                });

            modelBuilder.Entity("Rigel.Core.Models.Category", b =>
                {
                    b.Navigation("posts");
                });

            modelBuilder.Entity("Rigel.Core.Models.Message", b =>
                {
                    b.Navigation("replies");
                });

            modelBuilder.Entity("Rigel.Core.Models.Post", b =>
                {
                    b.Navigation("messages");
                });

            modelBuilder.Entity("Rigel.Core.Models.User", b =>
                {
                    b.Navigation("messages");

                    b.Navigation("posts");
                });
#pragma warning restore 612, 618
        }
    }
}
